#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds;   
#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update> 
#define ld long double
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define all(a) a.begin(),a.end()
#define sz(a) (ll)(a.size())
const int M = 5e5+5;
std::vector<int> vtr[M];
int sub[M],cnt[M][3],lvl[M],a,b,c,n;
bool big[M];
ld ans[M];
void reset(int n)
{
	for(int i=0;i<=n;i++)
	{
		vtr[i].clear();
		lvl[i]=0;
		ans[i]=0;
		big[i]=0;
		for(int j=0;j<3;j++)
			cnt[i][j]=0;
		sub[i]=0;
	}
}
void dfs(int x,int l=0)
{
	sub[x]=1;
	lvl[x]=l;
	for(auto u:vtr[x])
	{
		dfs(u,l+1);
		sub[x]+=sub[u];
	}
}
void add(int x,int z)
{
	cnt[lvl[x]%a][0]+=z;
	cnt[lvl[x]%b][1]+=z;
	cnt[lvl[x]%c][2]+=z;
	for(auto u:vtr[x])
		if(!big[u])
			add(u,z);
}
void solve(int x,bool keep)
{
	int mx = -1,bigchild = -1;
	for(auto u:vtr[x])
	{
		if(sub[u] >mx)
		{
			mx = sub[u];
			bigchild = u;
		}
	}
	for(auto u: vtr[x])
	{
		if(u!=bigchild)
			solve(u,0);
	}
	if(bigchild!=-1)
	{
		solve(bigchild,1);
		big[bigchild] = 1;
	}
	add(x,1);
	ld p = cnt[lvl[x]%a][0],q = cnt[lvl[x]%b][1],r=cnt[lvl[x]%c][2],s = n;
	ans[x] = (p/s)+(q/s)-(p*q)/(s*s);
	if(bigchild!=-1)
		big[bigchild] = 0;
	if(keep==0)
		add(x,-1);
}
int main()
{
	ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
	int test;
	cin>>test;
	for(int tt=1;tt<=test;tt++)
	{
		cout<<"Case #"<<tt<<": ";
		cin>>n>>a>>b;
		reset(n);
		ll z = (ll)a*(ll)b/(ll)(__gcd(a,b));
		z = min(z,(ll)1e9);
		c=z;
		for(int i=2;i<=n;i++)
		{
			int p;
			cin>>p;
			vtr[p].pb(i);
		}
		dfs(1);
		solve(1,1);
		ld res = 0;
		for(int i=1;i<=n;i++)
		{
			// cout<<i<<" "<<ans[i]<<endl;
			res += (ld)(ans[i]);
		}
		cout<<fixed<<setprecision(8)<<res<<"\n";
	}
	return 0;
}